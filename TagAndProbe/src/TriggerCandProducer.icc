#include <cmath>
#include "DataFormats/Math/interface/deltaR.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include <string>


template<class object >
TriggerCandProducer<object>::TriggerCandProducer(const edm::ParameterSet& iConfig )
{

  _inputProducer = iConfig.template getParameter<edm::InputTag>("InputProducer");
  
  // **************** Trigger ******************* //
  const edm::InputTag dTriggerEventTag("hltTriggerSummaryAOD","","HLT8E29");
  triggerEventTag_ = 
    iConfig.getUntrackedParameter<edm::InputTag>("triggerEventTag",
						 dTriggerEventTag);
  
  const edm::InputTag dHLTTag("HLT_Ele15_LW_L1R", "","HLT8E29");
  hltTag_ = iConfig.getUntrackedParameter<edm::InputTag>("hltTag",dHLTTag);
  
  delRMatchingCut_ = iConfig.getUntrackedParameter<double>("triggerDelRMatch",
							   0.30);
  // ******************************************** //
  //Trigger path VS l1 trigger filter. Trigger Path is default.
  isFilter_ = iConfig.getUntrackedParameter<bool>("isTriggerFilter",false);
  printIndex_ = iConfig.getUntrackedParameter<bool>("verbose",false);

  produces< edm::PtrVector<object> >();
  produces< edm::RefToBaseVector<object> >();
}


template<class object>
TriggerCandProducer<object>::~TriggerCandProducer()
{

}


//
// member functions
//


// ------------ method called to produce the data  ------------
template<class object >
void TriggerCandProducer<object>::produce(edm::Event &event, const edm::EventSetup &eventSetup)
{

  using namespace std;
  using namespace edm;
  using namespace reco;
  using namespace trigger;


   // Create the output collection
  std::auto_ptr< edm::RefToBaseVector<object> > 
    outColRef( new edm::RefToBaseVector<object> );
  std::auto_ptr< edm::PtrVector<object> > 
    outColPtr( new edm::PtrVector<object> );


   // Get the input collection
   edm::Handle<edm::View<object> > candHandle;
   try
   {
      event.getByLabel(_inputProducer, candHandle);
   }
   catch(cms::Exception &ex)
   {
      edm::LogError("TriggerCandProducer") << "Error! Can't get collection: " << 
	_inputProducer;
      throw ex;
   }

   // Trigger Info
   edm::Handle<trigger::TriggerEvent> trgEvent;
   event.getByLabel(triggerEventTag_,trgEvent);

   // Some sanity checks
   if (not trgEvent.isValid()) {
     edm::LogInfo("info")<< "******** Following Trigger Summary Object Not Found: " << 
       triggerEventTag_;

     event.put(outColRef);
     event.put(outColPtr);
     return;
   }

   //---------------------------------------------------------------------------

   edm::InputTag filterTag;
   // loop over these objects to see whether they match
   const trigger::TriggerObjectCollection& TOC( trgEvent->getObjects() );
     
   
   int index=9999;

   if(isFilter_){
   //-----------------------------------------------------------------------
   filterName_ = hltTag_.label();
   for(int i=0; i != trgEvent->sizeFilters(); ++i) {
     std::string label(trgEvent->filterTag(i).label());
     if( label == hltTag_.label() ) index = i;
   }
   //-----------------------------------------------------------------------
   if(printIndex_) std::cout << "filter search: " <<  
     hltTag_.label() << "   index: " << index << std::endl;
   }
   else{
     std::vector<std::string> filters 
       = hltConfig_.moduleLabels( hltTag_.label() );
     for(std::vector<std::string>::iterator filter =
	   filters.begin(); filter!= filters.end(); ++filter ) {
       
       edm::InputTag testTag(*filter,"", hltTag_.process() );
       
       int testindex = trgEvent->filterIndex(testTag);
       if ( !(testindex >= trgEvent->sizeFilters()) ) {
	 
	 filterName_ = *filter;
	 filterTag=testTag;
       }
     }
     
     index = trgEvent->filterIndex( filterTag );
   }

   if(printIndex_) std::cout << "hltTag_.label() " <<  
     hltTag_.label() << "   filter name " <<  
     filterName_ << "  index " << index << "  sizeFilters " <<  
     trgEvent->sizeFilters() << std::endl;

   //-----------------------------------------------------------------
   // find how many relevant
   /*
   edm::InputTag l1testTag(filterName_,"", hltTag_.process() );
   const int index = trgEvent->filterIndex( l1testTag );
   */
   //-----------------------------------------------------------------


   if( index >= trgEvent->sizeFilters() ) {
     edm::LogInfo("info")<< "******** Following TRIGGER Name Not in Dataset: " <<
       hltTag_.label();

     event.put(outColRef);
     event.put(outColPtr);
     return;
   }

   // find how many objects there are
   const trigger::Keys& KEYS(trgEvent->filterKeys(index));
   const size_type nK(KEYS.size());

   // Loop over the candidate collection
   const edm::PtrVector<object>& ptrVect = candHandle->ptrVector();
   const edm::RefToBaseVector<object>& refs = candHandle->refVector();
   unsigned int counter=0;

   for( typename edm::View< object>::const_iterator j = candHandle->begin(); 
	j != candHandle->end(); ++j, ++counter) {

     // Get cut decision for each candidate
     // Did this candidate cause a HLT trigger?
     bool hltTrigger = false;
     for(int ipart = 0; ipart != nK; ++ipart) { 

       const trigger::TriggerObject& TO = TOC[KEYS[ipart]];	
       double dRval = deltaR( j->eta(), j->phi(), 
			      TO.eta(), TO.phi());	
       hltTrigger = dRval < delRMatchingCut_;
       if( hltTrigger ) break;
     }       

     if(hltTrigger) { 
       outColRef->push_back( refs[counter] );
       outColPtr->push_back( ptrVect[counter] );
     }
   } 

   event.put(outColRef);
   event.put(outColPtr);
}
   


// ---- method called once each job just before starting event loop  ---
template<class object>
void TriggerCandProducer<object>::beginRun(edm::Run& iRun, edm::EventSetup const& iSetup){
  //std::cout << "calling init(" << "iRun" << ", " << "iSetup" << ", " << hltTag_.process() << ", " << "changed_" << ") in beginRun()" << std::endl;
  if(!hltConfig_.init(iRun,iSetup,hltTag_.process(),changed_) ){
    edm::LogError("TriggerCandProducer") << 
      "Error! Can't initialize HLTConfigProvider";
    throw cms::Exception("HLTConfigProvider::init() returned non 0");
  }
  if(printIndex_ && changed_)
    std::cout << "HLT configuration changed !" << std::endl;
  std::vector<std::string> filters = hltConfig_.moduleLabels( hltTag_.label() );
}

template<class object>
void TriggerCandProducer<object>::beginJob() {
  filterName_ = "";
}



template<class object>
void TriggerCandProducer<object >::endJob() {
}

