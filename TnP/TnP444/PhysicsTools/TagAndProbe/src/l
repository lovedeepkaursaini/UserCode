10d9
< #include "TGraphAsymmErrors.h"
13,16c12,16
< #include "Math/QuantFuncMathCore.h"
< #include "Roo1DTable.h"
< #include "RooAbsDataStore.h"
< #include "RooAbsReal.h"
---
> #include "RooWorkspace.h"
> #include "RooDataSet.h"
> #include "RooDataHist.h"
> #include "RooRealVar.h"
> #include "RooFormulaVar.h"
17a18,22
> #include "RooGlobalFunc.h"
> #include "RooCategory.h"
> #include "RooSimultaneous.h"
> #include "RooPlot.h"
> #include "RooFitResult.h"
20,23c25,31
< #include "RooCategory.h"
< #include "RooChebychev.h"
< #include "RooDataHist.h"
< #include "RooDataSet.h"
---
> #include "RooMultiCategory.h"
> #include "RooMappedCategory.h"
> #include "RooThresholdCategory.h"
> #include "Roo1DTable.h"
> #include "RooMinuit.h"
> #include "RooNLLVar.h"
> #include "RooAbsDataStore.h"
25,27d32
< #include "RooExtendPdf.h"
< #include "RooFitResult.h"
< #include "RooFormulaVar.h"
28a34,35
> #include "RooChebychev.h"
> #include "RooProdPdf.h"
30,32c37,40
< #include "RooGlobalFunc.h"
< #include "RooLinkedListIter.h"
< #include "RooMappedCategory.h"
---
> #include "RooExtendPdf.h"
> #include "RooTrace.h"
> #include "RooMsgService.h"
> #include "Math/QuantFuncMathCore.h"
35,37d42
< #include "RooMsgService.h"
< #include "RooMultiCategory.h"
< #include "RooNLLVar.h"
39,40c44
< #include "RooPlot.h"
< #include "RooProdPdf.h"
---
> #include "RooAbsReal.h"
42,46d45
< #include "RooRealVar.h"
< #include "RooSimultaneous.h"
< #include "RooThresholdCategory.h"
< #include "RooTrace.h"
< #include "RooWorkspace.h"
75,76d73
<   doSaveDistributionsPlot = true;
< 
98a96
> 
99a98
> 
219c218
<    //RooArgSet threshCategories;
---
>    RooArgSet threshCategories;
225,227c224,226
<      ////try to patch in thresholds
<      //categories.addClone(*cat);
<      //threshCategories.addClone(*cat);     
---
>      //try to patch in thresholds
>      categories.addClone(*cat);
>      threshCategories.addClone(*cat);     
243a243
>       string multiStateFail = "{";      
245c245
<         if (i) { multiState += ";"; effName += " && "; }
---
>         if (i) { multiState += ";"; multiStateFail += ";"; effName += " && "; }
247a248,256
> 	if (i != effCats.size()-1) 
> 	  multiStateFail += effStates[i];
> 	else {
> 	  if (effStates[i] == "pass")      multiStateFail += "fail";
> 	  else if (effStates[i] == "fail") multiStateFail += "pass";
> 
> 	  if (effStates[i] == "above")      multiStateFail += "below";
> 	  else if (effStates[i] == "below") multiStateFail += "above";
> 	}
250a260,264
>       multiStateFail += "}";
> 
>       std::cout << multiStateFail << std::endl;
>       std::cout << multiState << std::endl;
>       std::cout << effName << std::endl;
253c267,268
<       RooMappedCategory efficiencyCategory("_efficiencyCategory_", "_efficiencyCategory_", efficiencyMultiCategory, "Failed");
---
>       RooMappedCategory efficiencyCategory("_efficiencyCategory_", "_efficiencyCategory_", efficiencyMultiCategory, "Default");
>       efficiencyCategory.map(multiStateFail.c_str(), "Failed");
254a270
>       efficiencyCategory.Print();
259c275
<   RooMappedCategory pdfCategory("_pdfCategory_", "_pdfCategory_", allCats, (binToPDFmap.size()>0)?binToPDFmap[0].c_str():"all");
---
>   RooMappedCategory pdfCategory("_pdfCategory_", "_pdfCategory_", allCats, (binToPDFmap.size()>0)?binToPDFmap[0].c_str():"");
292c308,310
<     RooAbsData* data_bin = (RooDataSet*) data.reduce(Cut(TString::Format("allCats==%d",t->getVal())));
---
>     RooAbsData* data_bin = (RooDataSet*) data.reduce(//SelectVars(RooArgSet(variables["mass"], variables["passing"])),
>       Cut(TString::Format("allCats==%d",t->getVal())));
>     //const char* dname = data_bin->GetName();
323c341
<     if (doSaveDistributionsPlot) saveDistributionsPlot(w);
---
>     saveDistributionsPlot(w);
328,329c346,347
<       RooLinkedListIter vit = binnedVariables.iterator();
<       for(RooRealVar* v = (RooRealVar*)vit.Next(); v!=0; v = (RooRealVar*)vit.Next() ){
---
>       TIterator* vit = binnedVariables.createIterator();
>       for(RooRealVar* v = (RooRealVar*)vit->Next(); v!=0; v = (RooRealVar*)vit->Next() ){
337a356
>       delete vit;
349c368
< /*    efficiency.setVal(0);//reset
---
> /*      efficiency.setVal(0);//reset
394c413
<   if(pdfName == "all"){
---
>   if(pdfName == ""){
401c420
<   std::auto_ptr<RooFitResult> res(0);
---
>   RooFitResult* res = 0;
404d422
<   std::auto_ptr<RooDataHist> bdata;
410c428
<     bdata.reset(new RooDataHist("data_binned", "data_binned", *obs, *data)); 
---
>     RooDataHist *bdata = new RooDataHist("data_binned", "data_binned", *obs, *data); 
412c430
<     data = w->data("data_binned");
---
>     data = bdata;
497c515
<     res.reset( profMinuit->save() );
---
>     res = profMinuit->save();
519c537
<     res.reset( profMinuit->save() );
---
>     res = profMinuit->save();
541a560
>     //RooRealVar* nS = (RooRealVar*) res->floatParsFinal().find("numSignalAll");
543a563
>     //RooRealVar* nB = (RooRealVar*) res->floatParsFinal().find(totPassing != 0 ? "numBackgroundPass" : "numBackgroundFail");
615c635
<   //std::cout << "Number of probes: " << totPassing+totFailinging << std::endl;
---
>   std::cout << "Number of probes: " << totPassing+totFailinging << std::endl;
620a641
>   //w->var("numSignalAll")->setVal(numSignalAll);
621a643,644
>   //w->var("numPass")->setVal(totPassing);
>   //w->var("numFail")->setVal(totFailinging);
622a646,647
>   //w->var("numPass")->setMax(2.0*totPassing+10);
>   //w->var("numFail")->setMax(2.0*totFailinging+10);
627a653,655
>     //w->var("fBackgroundPass")->setVal(0.0);
>     //w->var("fBackgroundPass")->setConstant(true);
>     //w->var("fBackgroundFail")->setConstant(false);
631a660,662
>     //w->var("fBackgroundPass")->setConstant(false);
>     //w->var("fBackgroundFail")->setVal(0.0);
>     //w->var("fBackgroundFail")->setConstant(true);
633a665,666
>     //w->var("fBackgroundPass")->setConstant(false);
>     //w->var("fBackgroundFail")->setConstant(false);
647,649c680,683
<   RooAbsData* dataAll = (binnedFit ? w->data("data_binned") : w->data("data") );
<   RooAbsData* dataPass = dataAll->reduce(Cut("_efficiencyCategory_==_efficiencyCategory_::Passed")); 
<   RooAbsData* dataFail = dataAll->reduce(Cut("_efficiencyCategory_==_efficiencyCategory_::Failed")); 
---
>   RooAbsData* data = (binnedFit ? w->data("data_binned") : w->data("data") );
>   RooAbsData* dataPass = data->reduce(Cut("_efficiencyCategory_==_efficiencyCategory_::Passed")); 
>   RooAbsData* dataFail = data->reduce(Cut("_efficiencyCategory_==_efficiencyCategory_::Failed")); 
>   RooAbsData* dataAll  = data->reduce(Cut("_efficiencyCategory_==_efficiencyCategory_::Passed || _efficiencyCategory_==_efficiencyCategory_::Failed"));
651c685
<   std::auto_ptr<RooArgSet> obs(pdf.getObservables(*dataAll));
---
>   RooArgSet *obs = pdf.getObservables(*dataAll);
653,654c687,688
<   RooLinkedListIter it = obs->iterator();
<   for(RooAbsArg* v = (RooAbsArg*)it.Next(); v!=0; v = (RooAbsArg*)it.Next() ){
---
>   TIterator* it = obs->createIterator();
>   for(RooAbsArg* v = (RooAbsArg*)it->Next(); v!=0; v = (RooAbsArg*)it->Next() ){
709,711c743,746
<   RooAbsData* dataAll = w->data("data");
<   RooAbsData* dataPass = dataAll->reduce(Cut("_efficiencyCategory_==_efficiencyCategory_::Passed")); 
<   RooAbsData* dataFail = dataAll->reduce(Cut("_efficiencyCategory_==_efficiencyCategory_::Failed")); 
---
>   RooAbsData* data = w->data("data");
>   RooAbsData* dataPass = data->reduce(Cut("_efficiencyCategory_==_efficiencyCategory_::Passed")); 
>   RooAbsData* dataFail = data->reduce(Cut("_efficiencyCategory_==_efficiencyCategory_::Failed")); 
>   RooAbsData* dataAll = data->reduce(Cut("_efficiencyCategory_==_efficiencyCategory_::Passed || _efficiencyCategory_==_efficiencyCategory_::Failed")); 
715,716c750,751
<   RooLinkedListIter it = vars->iterator();
<   for(RooAbsArg* v = (RooAbsArg*)it.Next(); v!=0; v = (RooAbsArg*)it.Next() ){
---
>   TIterator* it = vars->createIterator();
>   for(RooAbsArg* v = (RooAbsArg*)it->Next(); v!=0; v = (RooAbsArg*)it->Next() ){
749a785
>   delete dataAll;
753,755c789,790
<   RooLinkedListIter v1it = binnedVariables.iterator();
<   bool isOnePoint = (eff.numEntries() == 1); // for datasets with > 1 entry, we don't make plots for variables with just one bin
<   for(RooRealVar* v1 = (RooRealVar*)v1it.Next(); v1!=0; v1 = (RooRealVar*)v1it.Next() ){
---
>   TIterator* v1it = binnedVariables.createIterator();
>   for(RooRealVar* v1 = (RooRealVar*)v1it->Next(); v1!=0; v1 = (RooRealVar*)v1it->Next() ){
757,759c792,793
<     if (v1->numBins() == 1 && !isOnePoint) continue;
<     RooLinkedListIter v2it = binnedVariables.iterator();
<     for(RooRealVar* v2 = (RooRealVar*)v2it.Next(); v2!=0; v2 = (RooRealVar*)v2it.Next() ){
---
>     TIterator* v2it = binnedVariables.createIterator();
>     for(RooRealVar* v2 = (RooRealVar*)v2it->Next(); v2!=0; v2 = (RooRealVar*)v2it->Next() ){
761d794
<       if (v2->numBins() == 1 && !isOnePoint) continue;
765,766c798,799
<       RooLinkedListIter v3it = binnedVariables.iterator();
<       for(RooRealVar* v3 = (RooRealVar*)v3it.Next(); v3!=0; v3 = (RooRealVar*)v3it.Next() ){
---
>       TIterator* v3it = binnedVariables.createIterator();
>       for(RooRealVar* v3 = (RooRealVar*)v3it->Next(); v3!=0; v3 = (RooRealVar*)v3it->Next() ){
776c809
<         std::auto_ptr<TIterator> catIt(allCats2D.typeIterator());
---
>         TIterator* catIt = allCats2D.typeIterator();
781c814,816
<           makeEfficiencyPlot2D(myEff, *v1, *v2, TString::Format("%s_%s_PLOT_%s",v1->GetName(), v2->GetName(), catName.Data()), catName, effName, "allCats1D", t->getVal());
---
>           RooDataSet* eff_bin = (RooDataSet*) myEff.reduce( Cut(TString::Format("allCats2D==%d",t->getVal())) );
>           makeEfficiencyPlot2D(*eff_bin, *v1, *v2, TString::Format("%s_%s_PLOT_%s",v1->GetName(), v2->GetName(), catName.Data()), catName, effName);
>           delete eff_bin;
791c826
<       std::auto_ptr<TIterator> catIt(allCats1D.typeIterator());
---
>       TIterator* catIt = allCats1D.typeIterator();
796c831,833
<         makeEfficiencyPlot1D(myEff, *v1, TString::Format("%s_PLOT_%s", v1->GetName(), catName.Data()), catName, effName, "allCats1D", t->getVal());
---
>         RooDataSet* eff_bin = (RooDataSet*) myEff.reduce( Cut(TString::Format("allCats1D==%d",t->getVal())) );
>         makeEfficiencyPlot1D(*eff_bin, *v1, TString::Format("%s_PLOT_%s", v1->GetName(), catName.Data()), catName, effName);
>         delete eff_bin;
802,813c839
< void TagProbeFitter::makeEfficiencyPlot1D(RooDataSet& eff, RooRealVar& v, TString plotName, TString plotTitle, TString effName, const char *catName, int catIndex){
<   TGraphAsymmErrors *p = new TGraphAsymmErrors();
<   const RooArgSet *entry = eff.get();
<   const RooRealVar &vi = dynamic_cast<const RooRealVar &>(*entry->find(v.GetName()));
<   const RooRealVar &ei = dynamic_cast<const RooRealVar &>(*entry->find("efficiency"));
<   for (unsigned int i = 0, n = eff.numEntries(); i < n; ++i) {
<     entry = eff.get(i); 
<     if (catName != 0 && entry->getCatIndex(catName) != catIndex) continue;
<     int j = p->GetN(); p->Set(j+1);
<     p->SetPoint(j, vi.getVal(), ei.getVal() );
<     p->SetPointError(j, -vi.getAsymErrorLo(), vi.getAsymErrorHi(), -ei.getAsymErrorLo(), ei.getAsymErrorHi() );
<   }
---
> void TagProbeFitter::makeEfficiencyPlot1D(RooDataSet& eff, RooRealVar& v, TString plotName, TString plotTitle, TString effName){
815,824c841,848
<   TH1F *frame = new TH1F("frame", "Efficiency of "+effName, 1, v.getMin(), v.getMax()); frame->SetDirectory(0);
<   p->SetNameTitle(Form("hxy_%s", eff.GetName()), "Efficiency of "+effName);
<   p->GetXaxis()->SetTitle(strlen(v.getUnit()) ? Form("%s (%s)", v.GetName(), v.getUnit()) : v.GetName());
<   p->GetYaxis()->SetTitle("Efficiency of "+effName);
<   frame->GetXaxis()->SetTitle(strlen(v.getUnit()) ? Form("%s (%s)", v.GetName(), v.getUnit()) : v.GetName());
<   frame->GetYaxis()->SetTitle("Efficiency of "+effName);
<   frame->GetYaxis()->SetRangeUser(0,1);
<   frame->Draw();
<   p->SetLineWidth(2); p->SetMarkerStyle(kFullCircle); p->SetMarkerSize(1.2);
<   p->Draw("P SAME");
---
>   const RooArgSet* set = eff.get();
>   RooRealVar* e = (RooRealVar*) set->find("efficiency");
>   RooPlot* p = v.frame(Name(plotName), Title(plotTitle));
>   eff.plotOnXY(p,YVar(*e));
>   p->SetYTitle(TString("Efficiency of ")+effName);
>   p->SetAxisRange(0,1,"Y");
>   p->Draw();
>   canvas.Draw();
826d849
<   delete frame;
830c853
< void TagProbeFitter::makeEfficiencyPlot2D(RooDataSet& eff, RooRealVar& v1, RooRealVar& v2, TString plotName, TString plotTitle, TString effName, const char *catName, int catIndex){
---
> void TagProbeFitter::makeEfficiencyPlot2D(RooDataSet& eff, RooRealVar& v1, RooRealVar& v2, TString plotName, TString plotTitle, TString effName){
845,846c868
<     const RooArgSet *entry = eff.get(i); 
<     if (catName != 0 && entry->getCatIndex(catName) != catIndex) continue;
---
>     eff.get(i);
