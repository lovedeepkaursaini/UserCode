#define trigEffi_cxx
#include "trigEffi.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <TH2.h> 
#include <TStyle.h>
#include <TCanvas.h>
#include "TLorentzVector.h"
#include "iostream"
#include "map"
#include <vector>
#include <iostream>
#include <vector>
using namespace std;



void trigEffi::Loop(TString type)
{
   if (fChain == 0) return;

   Long64_t nentries = fChain->GetEntriesFast();

   TFile * file = new TFile("EffiHisto_"+type+"data.root","recreate");
        
   TH1D* hEtSCAll=new TH1D("hEtSCAll","hEtSCAll",100,0,100);
   TH1D* hEtSCAllEt10=new TH1D("hEtSCAllEt10","hEtSCAllEt10",100,0,100);
   TH1D* hEtSCAllEt10HoE=new TH1D("hEtSCAllEt10HoE","hEtSCAllEt10HoE",100,0,100);
   TH1D* hEtSCAllEt10HoESihih=new TH1D("hEtSCAllEt10HoESihih","hEtSCAllEt10HoESihih",100,0,100);
   TH1D* hEtSCAllEt10HoESihihnBC=new TH1D("hEtSCAllEt10HoESihihnBC","hEtSCAllEt10HoESihihnBC",100,0,100);

   TH1D* hEtSCTrgEt10HoESihihnBC=new TH1D("hEtSCTrgEt10HoESihihnBC","hEtSCTrgEt10HoESihihnBC",100,0,100);
   TH1D* hEtSCTrg=new TH1D("hEtSCTrg","hEtSCTrg",100,0,100);
   TH1D* hEtSCTrgEt10=new TH1D("hEtSCTrgEt10","hEtSCTrgEt10",100,0,100);
   TH1D* hEtSCTrgEt10HoE=new TH1D("hEtSCTrgEt10HoE","hEtSCTrgEt10HoE",100,0,100);
   TH1D* hEtSCTrgEt10HoESihih=new TH1D("hEtSCTrgEt10HoESihih","hEtSCTrgEt10HoESihih",100,0,100);

   TH1D* hEtSCL1TrgEt10HoESihihnBC=new TH1D("hEtSCL1TrgEt10HoESihihnBC","hEtSCL1TrgEt10HoESihihnBC",100,0,100);
   TH1D* hEtSCL1Trg=new TH1D("hEtSCL1Trg","hEtSCL1Trg",100,0,100);
   TH1D* hEtSCL1TrgEt10=new TH1D("hEtSCL1TrgEt10","hEtSCL1TrgEt10",100,0,100);
   TH1D* hEtSCL1TrgEt10HoE=new TH1D("hEtSCL1TrgEt10HoE","hEtSCL1TrgEt10HoE",100,0,100);
   TH1D* hEtSCL1TrgEt10HoESihih=new TH1D("hEtSCL1TrgEt10HoESihih","hEtSCL1TrgEt10HoESihih",100,0,100);

 
   Long64_t nbytes = 0, nb = 0;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;

      if(!(EvtInfo_BunchXing==1 || EvtInfo_BunchXing==1786))continue;

      std::map<string, bool> HltTrigStuff;
      for(int i=0; i!=trigName->size(); i++){
        HltTrigStuff[trigName->at(i)]=trigResults->at(i);
	//	cout<<"HLT: name  "<<trigName->at(i)<<",  result:  "<<trigResults->at(i)<<endl;
      }
      
      std::map<string, bool> L1TrigStuff;
      for(int i=0; i!=L1trigName->size(); i++){
        L1TrigStuff[L1trigName->at(i)]=L1trigResults->at(i);
	//	cout<<"L1: name  "<<L1trigName->at(i)<<",  result:  "<<L1trigResults->at(i)<<endl;
      }

      std::vector<double> SCVec;
      std::vector<double> TrgSCVec;
      std::vector<double> L1TrgSCVec;
      std::vector<double> SCVecEt10;
      std::vector<double> TrgSCVecEt10;
      std::vector<double> L1TrgSCVecEt10;
      std::vector<double> SCVecEt10HoE;
      std::vector<double> TrgSCVecEt10HoE;
      std::vector<double> L1TrgSCVecEt10HoE;
      std::vector<double> SCVecEt10HoESihih;
      std::vector<double> TrgSCVecEt10HoESihih;
      std::vector<double> L1TrgSCVecEt10HoESihih;
      std::vector<double> SCVecEt10HoESihihnBC;
      std::vector<double> TrgSCVecEt10HoESihihnBC;
      std::vector<double> L1TrgSCVecEt10HoESihihnBC;

      //  std::cout<<"EventNum: "<<EvtInfo_EventNum<<",  RunNum: "<<EvtInfo_RunNum<<",  LumiSection:  "<<EvtInfo_LumiSection<<",  BunchXing:  "<<EvtInfo_BunchXing<<std::endl;
       for(int i=0; i !=scEBNum; i++){
        double EBEt=scEBEt->at(i);
        double EBEta=scEBEta->at(i);
	double EBEnergy1=scEBenergy1->at(i);
	double EBEnergy3x3=scEBenergy3x3->at(i);
	double EBPhi=scEBPhi->at(i);
	double EBHoverE=scEBHoverE->at(i);
	double EBsigmaIetaIeta=scEBsigmaIetaIeta->at(i);
	double EBnBasicClusters=scEBnBasicClusters->at(i);

	if((EBEnergy1/EBEnergy3x3)>0.9)continue;

	SCVec.push_back(EBEt);
	if(HltTrigStuff["HLT_Photon10_L1R"])TrgSCVec.push_back(EBEt);
	if(L1TrigStuff["L1_SingleEG5"])L1TrgSCVec.push_back(EBEt);

	if(EBEt>10.)
	  {
	    SCVecEt10.push_back(EBEt);
	    if(HltTrigStuff["HLT_Photon10_L1R"])TrgSCVecEt10.push_back(EBEt);
	    if(L1TrigStuff["L1_SingleEG5"])L1TrgSCVecEt10.push_back(EBEt);
	  }
	if(EBEt>10 && EBHoverE < 0.05)
	  {
	    SCVecEt10HoE.push_back(EBEt);
	    if(HltTrigStuff["HLT_Photon10_L1R"])TrgSCVecEt10HoE.push_back(EBEt);
	    if(L1TrigStuff["L1_SingleEG5"])L1TrgSCVecEt10HoE.push_back(EBEt);
	  }
	if(EBEt>10 && EBHoverE < 0.05 && EBsigmaIetaIeta < 0.0275)
	  {
	    SCVecEt10HoESihih.push_back(EBEt);
	    if(HltTrigStuff["HLT_Photon10_L1R"])TrgSCVecEt10HoESihih.push_back(EBEt);
	    if(L1TrigStuff["L1_SingleEG5"])L1TrgSCVecEt10HoESihih.push_back(EBEt);
	  }
	if(EBEt>10 && EBHoverE < 0.05 && EBsigmaIetaIeta < 0.0275 && EBnBasicClusters==1)
	  {
	    SCVecEt10HoESihihnBC.push_back(EBEt);
	    if(HltTrigStuff["HLT_Photon10_L1R"])TrgSCVecEt10HoESihihnBC.push_back(EBEt);
	    if(L1TrigStuff["L1_SingleEG5"])L1TrgSCVecEt10HoESihihnBC.push_back(EBEt);
	  }
       }

       if(SCVec.size())hEtSCAll->Fill(SCVec[0]);
       if(SCVecEt10.size())hEtSCAllEt10->Fill(SCVecEt10[0]);
       if(SCVecEt10HoE.size())hEtSCAllEt10HoE->Fill(SCVecEt10HoE[0]);
       if(SCVecEt10HoESihih.size())hEtSCAllEt10HoESihih->Fill(SCVecEt10HoESihih[0]);
       if(SCVecEt10HoESihihnBC.size())hEtSCAllEt10HoESihihnBC->Fill(SCVecEt10HoESihihnBC[0]);

       if(TrgSCVec.size())hEtSCTrg->Fill(TrgSCVec[0]);
       if(TrgSCVecEt10.size())hEtSCTrgEt10->Fill(TrgSCVecEt10[0]);
       if(TrgSCVecEt10HoE.size())hEtSCTrgEt10HoE->Fill(TrgSCVecEt10HoE[0]);
       if(TrgSCVecEt10HoESihih.size())hEtSCTrgEt10HoESihih->Fill(TrgSCVecEt10HoESihih[0]);
       if(TrgSCVecEt10HoESihihnBC.size())hEtSCTrgEt10HoESihihnBC->Fill(TrgSCVecEt10HoESihihnBC[0]);

       if(L1TrgSCVec.size())hEtSCL1Trg->Fill(L1TrgSCVec[0]);
       if(L1TrgSCVecEt10.size())hEtSCL1TrgEt10->Fill(L1TrgSCVecEt10[0]);
       if(L1TrgSCVecEt10HoE.size())hEtSCL1TrgEt10HoE->Fill(L1TrgSCVecEt10HoE[0]);
       if(L1TrgSCVecEt10HoESihih.size())hEtSCL1TrgEt10HoESihih->Fill(L1TrgSCVecEt10HoESihih[0]);
       if(L1TrgSCVecEt10HoESihihnBC.size())hEtSCL1TrgEt10HoESihihnBC->Fill(L1TrgSCVecEt10HoESihihnBC[0]);
   }
   file->cd();
   file->Write();
   file->Close();
}
